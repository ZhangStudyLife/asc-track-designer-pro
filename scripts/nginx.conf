# ASC Track Designer - Nginx 反向代理配置
# 文件位置: /etc/nginx/sites-available/trackd

# 限流区域定义（全局限流，配合应用层速率限制）
limit_req_zone $binary_remote_addr zone=trackd_general:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=trackd_upload:10m rate=5r/m;

# HTTP -> HTTPS 重定向
server {
    listen 80;
    listen [::]:80;
    server_name track.yourdomain.com;

    # Let's Encrypt ACME 验证
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # 重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS 配置
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name track.yourdomain.com;

    # SSL 证书（Let's Encrypt）
    ssl_certificate /etc/letsencrypt/live/track.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/track.yourdomain.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/track.yourdomain.com/chain.pem;

    # SSL 配置（现代浏览器）
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # 日志
    access_log /var/log/nginx/trackd_access.log;
    error_log /var/log/nginx/trackd_error.log;

    # 客户端上传大小限制
    client_max_body_size 5M;

    # 代理超时
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # API 路由（应用速率限制）
    location /api/ {
        # 全局限流：每分钟 100 个请求
        limit_req zone=trackd_general burst=20 nodelay;

        # 代理到后端
        proxy_pass http://localhost:8080;

        # 传递真实客户端 IP（重要！）
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;

        # WebSocket 支持（未来可能需要）
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # 禁用缓冲以实时传输
        proxy_buffering off;
    }

    # 上传接口额外限流
    location = /api/tracks {
        # 只对 POST 请求限流
        if ($request_method = POST) {
            set $limit_upload 1;
        }

        # 上传限流：每分钟 5 个请求（配合应用层的 5/10min）
        limit_req zone=trackd_upload burst=5 nodelay;

        proxy_pass http://localhost:8080;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }

    # 静态文件（前端）
    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
            proxy_pass http://localhost:8080;
            proxy_cache_valid 200 1d;
            add_header Cache-Control "public, max-age=86400";
        }
    }

    # 健康检查（不限流）
    location = /api/health {
        proxy_pass http://localhost:8080;
        access_log off;
    }
}

# 配置说明：
#
# 1. 限流策略：
#    - Nginx 层：100 req/min 全局限制
#    - 应用层：更细粒度的限制（见 RATE_LIMITING.md）
#
# 2. X-Forwarded-For：
#    - 使用 $proxy_add_x_forwarded_for 保留完整的代理链
#    - 应用层会提取第一个 IP 作为真实客户端 IP
#
# 3. SSL 证书：
#    - 使用 Let's Encrypt 自动续期
#    - 命令：certbot --nginx -d track.yourdomain.com
#
# 4. 日志轮转：
#    - 确保配置 logrotate 避免日志文件过大
#
# 5. 启用配置：
#    ln -s /etc/nginx/sites-available/trackd /etc/nginx/sites-enabled/
#    nginx -t
#    systemctl reload nginx
